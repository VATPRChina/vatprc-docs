/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FlightsIndexRouteImport } from './routes/flights/index'
import { Route as PilotTs3RouteImport } from './routes/pilot/ts3'
import { Route as PilotStartToFlyRouteImport } from './routes/pilot/start-to-fly'
import { Route as PilotPilotSoftwaresRouteImport } from './routes/pilot/pilot-softwares'
import { Route as PilotIntroductionToFlyRouteImport } from './routes/pilot/introduction-to-fly'
import { Route as FlightsCallsignRouteImport } from './routes/flights/$callsign'
import { Route as DocsSplatRouteImport } from './routes/docs/$'
import { Route as DivisionStaffRouteImport } from './routes/division/staff'
import { Route as DivisionPrivacyRouteImport } from './routes/division/privacy'
import { Route as DivisionMeetingRouteImport } from './routes/division/meeting'
import { Route as DivisionIntroductionRouteImport } from './routes/division/introduction'
import { Route as DivisionApiRouteImport } from './routes/division/api'
import { Route as ControllerVisitingAndTransferringRouteImport } from './routes/controller/visiting-and-transferring'
import { Route as ControllerSectorRouteImport } from './routes/controller/sector'
import { Route as ControllerLoaRouteImport } from './routes/controller/loa'
import { Route as ControllerControllerRegulationsRouteImport } from './routes/controller/controller-regulations'
import { Route as ControllerControllerListRouteImport } from './routes/controller/controller-list'
import { Route as ControllerBecomeAControllerRouteImport } from './routes/controller/become-a-controller'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'
import { Route as AirspaceVfrRouteImport } from './routes/airspace/vfr'
import { Route as AirspaceStationRouteImport } from './routes/airspace/station'
import { Route as AirspaceSopRouteImport } from './routes/airspace/sop'
import { Route as AirspaceRvsmRouteImport } from './routes/airspace/rvsm'
import { Route as AirspaceFirRouteImport } from './routes/airspace/fir'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FlightsIndexRoute = FlightsIndexRouteImport.update({
  id: '/flights/',
  path: '/flights/',
  getParentRoute: () => rootRouteImport,
} as any)
const PilotTs3Route = PilotTs3RouteImport.update({
  id: '/pilot/ts3',
  path: '/pilot/ts3',
  getParentRoute: () => rootRouteImport,
} as any)
const PilotStartToFlyRoute = PilotStartToFlyRouteImport.update({
  id: '/pilot/start-to-fly',
  path: '/pilot/start-to-fly',
  getParentRoute: () => rootRouteImport,
} as any)
const PilotPilotSoftwaresRoute = PilotPilotSoftwaresRouteImport.update({
  id: '/pilot/pilot-softwares',
  path: '/pilot/pilot-softwares',
  getParentRoute: () => rootRouteImport,
} as any)
const PilotIntroductionToFlyRoute = PilotIntroductionToFlyRouteImport.update({
  id: '/pilot/introduction-to-fly',
  path: '/pilot/introduction-to-fly',
  getParentRoute: () => rootRouteImport,
} as any)
const FlightsCallsignRoute = FlightsCallsignRouteImport.update({
  id: '/flights/$callsign',
  path: '/flights/$callsign',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsSplatRoute = DocsSplatRouteImport.update({
  id: '/docs/$',
  path: '/docs/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DivisionStaffRoute = DivisionStaffRouteImport.update({
  id: '/division/staff',
  path: '/division/staff',
  getParentRoute: () => rootRouteImport,
} as any)
const DivisionPrivacyRoute = DivisionPrivacyRouteImport.update({
  id: '/division/privacy',
  path: '/division/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const DivisionMeetingRoute = DivisionMeetingRouteImport.update({
  id: '/division/meeting',
  path: '/division/meeting',
  getParentRoute: () => rootRouteImport,
} as any)
const DivisionIntroductionRoute = DivisionIntroductionRouteImport.update({
  id: '/division/introduction',
  path: '/division/introduction',
  getParentRoute: () => rootRouteImport,
} as any)
const DivisionApiRoute = DivisionApiRouteImport.update({
  id: '/division/api',
  path: '/division/api',
  getParentRoute: () => rootRouteImport,
} as any)
const ControllerVisitingAndTransferringRoute =
  ControllerVisitingAndTransferringRouteImport.update({
    id: '/controller/visiting-and-transferring',
    path: '/controller/visiting-and-transferring',
    getParentRoute: () => rootRouteImport,
  } as any)
const ControllerSectorRoute = ControllerSectorRouteImport.update({
  id: '/controller/sector',
  path: '/controller/sector',
  getParentRoute: () => rootRouteImport,
} as any)
const ControllerLoaRoute = ControllerLoaRouteImport.update({
  id: '/controller/loa',
  path: '/controller/loa',
  getParentRoute: () => rootRouteImport,
} as any)
const ControllerControllerRegulationsRoute =
  ControllerControllerRegulationsRouteImport.update({
    id: '/controller/controller-regulations',
    path: '/controller/controller-regulations',
    getParentRoute: () => rootRouteImport,
  } as any)
const ControllerControllerListRoute =
  ControllerControllerListRouteImport.update({
    id: '/controller/controller-list',
    path: '/controller/controller-list',
    getParentRoute: () => rootRouteImport,
  } as any)
const ControllerBecomeAControllerRoute =
  ControllerBecomeAControllerRouteImport.update({
    id: '/controller/become-a-controller',
    path: '/controller/become-a-controller',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AirspaceVfrRoute = AirspaceVfrRouteImport.update({
  id: '/airspace/vfr',
  path: '/airspace/vfr',
  getParentRoute: () => rootRouteImport,
} as any)
const AirspaceStationRoute = AirspaceStationRouteImport.update({
  id: '/airspace/station',
  path: '/airspace/station',
  getParentRoute: () => rootRouteImport,
} as any)
const AirspaceSopRoute = AirspaceSopRouteImport.update({
  id: '/airspace/sop',
  path: '/airspace/sop',
  getParentRoute: () => rootRouteImport,
} as any)
const AirspaceRvsmRoute = AirspaceRvsmRouteImport.update({
  id: '/airspace/rvsm',
  path: '/airspace/rvsm',
  getParentRoute: () => rootRouteImport,
} as any)
const AirspaceFirRoute = AirspaceFirRouteImport.update({
  id: '/airspace/fir',
  path: '/airspace/fir',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/airspace/fir': typeof AirspaceFirRoute
  '/airspace/rvsm': typeof AirspaceRvsmRoute
  '/airspace/sop': typeof AirspaceSopRoute
  '/airspace/station': typeof AirspaceStationRoute
  '/airspace/vfr': typeof AirspaceVfrRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/controller/become-a-controller': typeof ControllerBecomeAControllerRoute
  '/controller/controller-list': typeof ControllerControllerListRoute
  '/controller/controller-regulations': typeof ControllerControllerRegulationsRoute
  '/controller/loa': typeof ControllerLoaRoute
  '/controller/sector': typeof ControllerSectorRoute
  '/controller/visiting-and-transferring': typeof ControllerVisitingAndTransferringRoute
  '/division/api': typeof DivisionApiRoute
  '/division/introduction': typeof DivisionIntroductionRoute
  '/division/meeting': typeof DivisionMeetingRoute
  '/division/privacy': typeof DivisionPrivacyRoute
  '/division/staff': typeof DivisionStaffRoute
  '/docs/$': typeof DocsSplatRoute
  '/flights/$callsign': typeof FlightsCallsignRoute
  '/pilot/introduction-to-fly': typeof PilotIntroductionToFlyRoute
  '/pilot/pilot-softwares': typeof PilotPilotSoftwaresRoute
  '/pilot/start-to-fly': typeof PilotStartToFlyRoute
  '/pilot/ts3': typeof PilotTs3Route
  '/flights': typeof FlightsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/airspace/fir': typeof AirspaceFirRoute
  '/airspace/rvsm': typeof AirspaceRvsmRoute
  '/airspace/sop': typeof AirspaceSopRoute
  '/airspace/station': typeof AirspaceStationRoute
  '/airspace/vfr': typeof AirspaceVfrRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/controller/become-a-controller': typeof ControllerBecomeAControllerRoute
  '/controller/controller-list': typeof ControllerControllerListRoute
  '/controller/controller-regulations': typeof ControllerControllerRegulationsRoute
  '/controller/loa': typeof ControllerLoaRoute
  '/controller/sector': typeof ControllerSectorRoute
  '/controller/visiting-and-transferring': typeof ControllerVisitingAndTransferringRoute
  '/division/api': typeof DivisionApiRoute
  '/division/introduction': typeof DivisionIntroductionRoute
  '/division/meeting': typeof DivisionMeetingRoute
  '/division/privacy': typeof DivisionPrivacyRoute
  '/division/staff': typeof DivisionStaffRoute
  '/docs/$': typeof DocsSplatRoute
  '/flights/$callsign': typeof FlightsCallsignRoute
  '/pilot/introduction-to-fly': typeof PilotIntroductionToFlyRoute
  '/pilot/pilot-softwares': typeof PilotPilotSoftwaresRoute
  '/pilot/start-to-fly': typeof PilotStartToFlyRoute
  '/pilot/ts3': typeof PilotTs3Route
  '/flights': typeof FlightsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/airspace/fir': typeof AirspaceFirRoute
  '/airspace/rvsm': typeof AirspaceRvsmRoute
  '/airspace/sop': typeof AirspaceSopRoute
  '/airspace/station': typeof AirspaceStationRoute
  '/airspace/vfr': typeof AirspaceVfrRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/controller/become-a-controller': typeof ControllerBecomeAControllerRoute
  '/controller/controller-list': typeof ControllerControllerListRoute
  '/controller/controller-regulations': typeof ControllerControllerRegulationsRoute
  '/controller/loa': typeof ControllerLoaRoute
  '/controller/sector': typeof ControllerSectorRoute
  '/controller/visiting-and-transferring': typeof ControllerVisitingAndTransferringRoute
  '/division/api': typeof DivisionApiRoute
  '/division/introduction': typeof DivisionIntroductionRoute
  '/division/meeting': typeof DivisionMeetingRoute
  '/division/privacy': typeof DivisionPrivacyRoute
  '/division/staff': typeof DivisionStaffRoute
  '/docs/$': typeof DocsSplatRoute
  '/flights/$callsign': typeof FlightsCallsignRoute
  '/pilot/introduction-to-fly': typeof PilotIntroductionToFlyRoute
  '/pilot/pilot-softwares': typeof PilotPilotSoftwaresRoute
  '/pilot/start-to-fly': typeof PilotStartToFlyRoute
  '/pilot/ts3': typeof PilotTs3Route
  '/flights/': typeof FlightsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/airspace/fir'
    | '/airspace/rvsm'
    | '/airspace/sop'
    | '/airspace/station'
    | '/airspace/vfr'
    | '/auth/callback'
    | '/controller/become-a-controller'
    | '/controller/controller-list'
    | '/controller/controller-regulations'
    | '/controller/loa'
    | '/controller/sector'
    | '/controller/visiting-and-transferring'
    | '/division/api'
    | '/division/introduction'
    | '/division/meeting'
    | '/division/privacy'
    | '/division/staff'
    | '/docs/$'
    | '/flights/$callsign'
    | '/pilot/introduction-to-fly'
    | '/pilot/pilot-softwares'
    | '/pilot/start-to-fly'
    | '/pilot/ts3'
    | '/flights'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/airspace/fir'
    | '/airspace/rvsm'
    | '/airspace/sop'
    | '/airspace/station'
    | '/airspace/vfr'
    | '/auth/callback'
    | '/controller/become-a-controller'
    | '/controller/controller-list'
    | '/controller/controller-regulations'
    | '/controller/loa'
    | '/controller/sector'
    | '/controller/visiting-and-transferring'
    | '/division/api'
    | '/division/introduction'
    | '/division/meeting'
    | '/division/privacy'
    | '/division/staff'
    | '/docs/$'
    | '/flights/$callsign'
    | '/pilot/introduction-to-fly'
    | '/pilot/pilot-softwares'
    | '/pilot/start-to-fly'
    | '/pilot/ts3'
    | '/flights'
  id:
    | '__root__'
    | '/'
    | '/airspace/fir'
    | '/airspace/rvsm'
    | '/airspace/sop'
    | '/airspace/station'
    | '/airspace/vfr'
    | '/auth/callback'
    | '/controller/become-a-controller'
    | '/controller/controller-list'
    | '/controller/controller-regulations'
    | '/controller/loa'
    | '/controller/sector'
    | '/controller/visiting-and-transferring'
    | '/division/api'
    | '/division/introduction'
    | '/division/meeting'
    | '/division/privacy'
    | '/division/staff'
    | '/docs/$'
    | '/flights/$callsign'
    | '/pilot/introduction-to-fly'
    | '/pilot/pilot-softwares'
    | '/pilot/start-to-fly'
    | '/pilot/ts3'
    | '/flights/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AirspaceFirRoute: typeof AirspaceFirRoute
  AirspaceRvsmRoute: typeof AirspaceRvsmRoute
  AirspaceSopRoute: typeof AirspaceSopRoute
  AirspaceStationRoute: typeof AirspaceStationRoute
  AirspaceVfrRoute: typeof AirspaceVfrRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  ControllerBecomeAControllerRoute: typeof ControllerBecomeAControllerRoute
  ControllerControllerListRoute: typeof ControllerControllerListRoute
  ControllerControllerRegulationsRoute: typeof ControllerControllerRegulationsRoute
  ControllerLoaRoute: typeof ControllerLoaRoute
  ControllerSectorRoute: typeof ControllerSectorRoute
  ControllerVisitingAndTransferringRoute: typeof ControllerVisitingAndTransferringRoute
  DivisionApiRoute: typeof DivisionApiRoute
  DivisionIntroductionRoute: typeof DivisionIntroductionRoute
  DivisionMeetingRoute: typeof DivisionMeetingRoute
  DivisionPrivacyRoute: typeof DivisionPrivacyRoute
  DivisionStaffRoute: typeof DivisionStaffRoute
  DocsSplatRoute: typeof DocsSplatRoute
  FlightsCallsignRoute: typeof FlightsCallsignRoute
  PilotIntroductionToFlyRoute: typeof PilotIntroductionToFlyRoute
  PilotPilotSoftwaresRoute: typeof PilotPilotSoftwaresRoute
  PilotStartToFlyRoute: typeof PilotStartToFlyRoute
  PilotTs3Route: typeof PilotTs3Route
  FlightsIndexRoute: typeof FlightsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flights/': {
      id: '/flights/'
      path: '/flights'
      fullPath: '/flights'
      preLoaderRoute: typeof FlightsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pilot/ts3': {
      id: '/pilot/ts3'
      path: '/pilot/ts3'
      fullPath: '/pilot/ts3'
      preLoaderRoute: typeof PilotTs3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pilot/start-to-fly': {
      id: '/pilot/start-to-fly'
      path: '/pilot/start-to-fly'
      fullPath: '/pilot/start-to-fly'
      preLoaderRoute: typeof PilotStartToFlyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pilot/pilot-softwares': {
      id: '/pilot/pilot-softwares'
      path: '/pilot/pilot-softwares'
      fullPath: '/pilot/pilot-softwares'
      preLoaderRoute: typeof PilotPilotSoftwaresRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pilot/introduction-to-fly': {
      id: '/pilot/introduction-to-fly'
      path: '/pilot/introduction-to-fly'
      fullPath: '/pilot/introduction-to-fly'
      preLoaderRoute: typeof PilotIntroductionToFlyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flights/$callsign': {
      id: '/flights/$callsign'
      path: '/flights/$callsign'
      fullPath: '/flights/$callsign'
      preLoaderRoute: typeof FlightsCallsignRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/$': {
      id: '/docs/$'
      path: '/docs/$'
      fullPath: '/docs/$'
      preLoaderRoute: typeof DocsSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/division/staff': {
      id: '/division/staff'
      path: '/division/staff'
      fullPath: '/division/staff'
      preLoaderRoute: typeof DivisionStaffRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/division/privacy': {
      id: '/division/privacy'
      path: '/division/privacy'
      fullPath: '/division/privacy'
      preLoaderRoute: typeof DivisionPrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/division/meeting': {
      id: '/division/meeting'
      path: '/division/meeting'
      fullPath: '/division/meeting'
      preLoaderRoute: typeof DivisionMeetingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/division/introduction': {
      id: '/division/introduction'
      path: '/division/introduction'
      fullPath: '/division/introduction'
      preLoaderRoute: typeof DivisionIntroductionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/division/api': {
      id: '/division/api'
      path: '/division/api'
      fullPath: '/division/api'
      preLoaderRoute: typeof DivisionApiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/controller/visiting-and-transferring': {
      id: '/controller/visiting-and-transferring'
      path: '/controller/visiting-and-transferring'
      fullPath: '/controller/visiting-and-transferring'
      preLoaderRoute: typeof ControllerVisitingAndTransferringRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/controller/sector': {
      id: '/controller/sector'
      path: '/controller/sector'
      fullPath: '/controller/sector'
      preLoaderRoute: typeof ControllerSectorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/controller/loa': {
      id: '/controller/loa'
      path: '/controller/loa'
      fullPath: '/controller/loa'
      preLoaderRoute: typeof ControllerLoaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/controller/controller-regulations': {
      id: '/controller/controller-regulations'
      path: '/controller/controller-regulations'
      fullPath: '/controller/controller-regulations'
      preLoaderRoute: typeof ControllerControllerRegulationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/controller/controller-list': {
      id: '/controller/controller-list'
      path: '/controller/controller-list'
      fullPath: '/controller/controller-list'
      preLoaderRoute: typeof ControllerControllerListRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/controller/become-a-controller': {
      id: '/controller/become-a-controller'
      path: '/controller/become-a-controller'
      fullPath: '/controller/become-a-controller'
      preLoaderRoute: typeof ControllerBecomeAControllerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/airspace/vfr': {
      id: '/airspace/vfr'
      path: '/airspace/vfr'
      fullPath: '/airspace/vfr'
      preLoaderRoute: typeof AirspaceVfrRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/airspace/station': {
      id: '/airspace/station'
      path: '/airspace/station'
      fullPath: '/airspace/station'
      preLoaderRoute: typeof AirspaceStationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/airspace/sop': {
      id: '/airspace/sop'
      path: '/airspace/sop'
      fullPath: '/airspace/sop'
      preLoaderRoute: typeof AirspaceSopRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/airspace/rvsm': {
      id: '/airspace/rvsm'
      path: '/airspace/rvsm'
      fullPath: '/airspace/rvsm'
      preLoaderRoute: typeof AirspaceRvsmRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/airspace/fir': {
      id: '/airspace/fir'
      path: '/airspace/fir'
      fullPath: '/airspace/fir'
      preLoaderRoute: typeof AirspaceFirRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AirspaceFirRoute: AirspaceFirRoute,
  AirspaceRvsmRoute: AirspaceRvsmRoute,
  AirspaceSopRoute: AirspaceSopRoute,
  AirspaceStationRoute: AirspaceStationRoute,
  AirspaceVfrRoute: AirspaceVfrRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  ControllerBecomeAControllerRoute: ControllerBecomeAControllerRoute,
  ControllerControllerListRoute: ControllerControllerListRoute,
  ControllerControllerRegulationsRoute: ControllerControllerRegulationsRoute,
  ControllerLoaRoute: ControllerLoaRoute,
  ControllerSectorRoute: ControllerSectorRoute,
  ControllerVisitingAndTransferringRoute:
    ControllerVisitingAndTransferringRoute,
  DivisionApiRoute: DivisionApiRoute,
  DivisionIntroductionRoute: DivisionIntroductionRoute,
  DivisionMeetingRoute: DivisionMeetingRoute,
  DivisionPrivacyRoute: DivisionPrivacyRoute,
  DivisionStaffRoute: DivisionStaffRoute,
  DocsSplatRoute: DocsSplatRoute,
  FlightsCallsignRoute: FlightsCallsignRoute,
  PilotIntroductionToFlyRoute: PilotIntroductionToFlyRoute,
  PilotPilotSoftwaresRoute: PilotPilotSoftwaresRoute,
  PilotStartToFlyRoute: PilotStartToFlyRoute,
  PilotTs3Route: PilotTs3Route,
  FlightsIndexRoute: FlightsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
